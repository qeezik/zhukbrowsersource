// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º SOCKS5 –Ω–∞ HTTP

// 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å VPN
function updateVpnStatus() {
    const statusIndicator = document.getElementById('statusIndicator');
    const statusText = document.getElementById('statusText');
    if (statusIndicator && statusText) {
        if (settings.proxyEnabled && settings.selectedCountry !== 'none') {
            const country = proxyServers[settings.selectedCountry];
            statusIndicator.textContent = 'üü¢';
            statusIndicator.className = 'status-indicator connected';
            statusText.textContent = `VPN (HTTP) –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ ${country.flag} ${country.name}`;
            statusIndicator.style.animation = 'none';
            setTimeout(() => {
                statusIndicator.style.animation = 'pulse-green 2s infinite';
            }, 10);
        } else {
            statusIndicator.textContent = 'üî¥';
            statusIndicator.className = 'status-indicator';
            statusText.textContent = 'VPN –æ—Ç–∫–ª—é—á–µ–Ω';
            statusIndicator.style.animation = 'none';
            setTimeout(() => {
                statusIndicator.style.animation = 'pulse 2s infinite';
            }, 10);
        }
    }
}

// 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
async function tryConnectProxy(proxy) {
    showNotification(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${proxy.type.toUpperCase()}-–ø—Ä–æ–∫—Å–∏...`);
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–∫—Å–∏ (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å)
    let proxyString = '';
    if (proxy.user && proxy.pass) {
        proxyString = `http://${proxy.user}:${proxy.pass}@${proxy.host}:${proxy.port}`;
    } else {
        proxyString = `http://${proxy.host}:${proxy.port}`;
    }
    if (window.electronAPI?.setProxy) {
        await window.electronAPI.setProxy(proxyString);
        await new Promise(r => setTimeout(r, 2000));
        let ip = null;
        let googleOk = false;
        try {
            const resp = await fetch('https://httpbin.org/ip', { cache: 'no-store' });
            if (resp.ok) {
                const data = await resp.json();
                ip = data.origin;
            }
        } catch (e) {}
        try {
            const resp = await fetch('https://www.google.com', { cache: 'no-store' });
            if (resp.ok) googleOk = true;
        } catch (e) {}
        if (ip && googleOk) {
            settings.proxyEnabled = true;
            settings.selectedCountry = proxy.code;
            settings.proxyHost = proxy.host;
            settings.proxyPort = proxy.port;
            settings.flag = proxy.flag || getFlag(proxy.code);
            localStorage.setItem('zhukbrowse_settings', JSON.stringify(settings));
            updateProxyButton();
            updateVpnStatus();
            showNotification(`VPN (HTTP) –ø–æ–¥–∫–ª—é—á–µ–Ω: ${proxy.country} (IP: ${ip})`);
            closeAllTabsExceptStart();
            createTab('https://httpbin.org/ip', `${proxy.country} IP`);
        } else {
            await window.electronAPI.clearProxy();
            showNotification('HTTP-–ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. VPN –æ—Ç–∫–ª—é—á—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π!');
            settings.proxyEnabled = false;
            settings.selectedCountry = 'none';
            updateProxyButton();
            updateVpnStatus();
        }
    }
}

// 3. –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
function enableIPAndLocationSpoofing() {
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP
    console.log('IP spoofing disabled - no IP blocking');
}

// 4. –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞—â–∏—Ç—É webview
function applyIncognitoProtectionToWebview(webview) {
    if (!webview) return;
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP
    console.log('Incognito protection disabled - no IP blocking');
}

// 5. –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
function applyMainBrowserProtectionToWebview(webview) {
    if (!webview) return;
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP
    console.log('Main browser protection disabled - no IP blocking');
}

// 6. –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function initializeIncognitoSecurity() {
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP
    console.log('Incognito security disabled - no IP blocking');
}

function initializeMainBrowserSecurity() {
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP
    console.log('Main browser security disabled - no IP blocking');
} 